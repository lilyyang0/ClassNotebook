/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-02-23 08:03:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch03;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class ok_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>ok</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h5>ok.jsp</h5>\r\n");
      out.write("<hr/>\r\n");
      out.write("★getMethod:");
      out.print(request.getMethod() );
      out.write("<br/>\r\n");
      out.write("<pre>\r\n");
      out.write("교재-비번변경 기능구현에서 p622~623\r\n");
      out.write("교재에서는 form에서의 요청방식을 파악하여\r\n");
      out.write("get방식이면 processForm()메서드를 호출, =>p622 22라인\r\n");
      out.write("post방식이면 processSubmit()메서드를 호출하는 방식으로 진행한다. =>P622 24라인\r\n");
      out.write("-------------\r\n");
      out.write("교재-글목록보기 기능구현 p641\r\n");
      out.write("get방식이면 processForm()메서드를 호출=>p641 21라인\r\n");
      out.write("post방식이면 processSubmit()메서드를 호출하는 방식으로 진행=>p641 23라인\r\n");
      out.write("\r\n");
      out.write("-------------\r\n");
      out.write("교재-글수정 기능 구현 p669\r\n");
      out.write("get방식이면 processForm()메서드를 호출=>p669 28라인\r\n");
      out.write("post방식이면 processForm()메서드를 호출=>p669 30라인\r\n");
      out.write("</pre>\r\n");
      out.write("<hr/>\r\n");
      out.write("http://127.0.0.1:8081/wp/ch03/ok.jsp<br/>\r\n");
      out.write("http://");
      out.print(request.getServerName() );
      out.write(':');
      out.print(request.getServerPort() );
      out.print(request.getRequestURI() );
      out.write("\r\n");
      out.write("<br/>\r\n");
      out.write("<h5><a href=\"./formEx01.jsp\">돌아가기</a></h5>\r\n");
      out.write("<hr/>\r\n");
/*이 문서는 client의 request를 받아서 비즈니스로직 처리하는 server측 문서이다.*/
//이름: <input type="text" name="userName" id="userId" value="hong길동"/>
//비밀번호: <input type="password" name="userPwd" id="" value="1234"/>
//http://localhost:8081/wp/ch03/ok.jsp?userName=kimyoon&userPwd=1234&snsYN=Y&season=autumn
//client의 요청request를 받아서 변수에 할당.
String name = request.getParameter("userName");//이름
String pwd = request.getParameter("userPwd");//비밀번호
String sns = request.getParameter("snsYN");
String[] seasons = request.getParameterValues("season");
out.println("seasons=" + seasons);

      out.write('\r');
      out.write('\n');

//browser에 출력
out.println("<br/>"+"user가 입력한 내용"+"<br/>");
out.println("이름:" + name + "<br/>");
out.println("비밀번호:" +pwd + "<br/>");
out.println("SNS수신여부:" +sns + "<br/>");
out.println("좋아하는계절:" +Arrays.toString(seasons));
if(seasons!=null){
for(String season : seasons){
	out.println("<br/>좋아하는 계절:" + season);
	}
}

      out.write("\r\n");
      out.write("<hr/>\r\n");

//p77 25라인 참고
//request.getParameterNames(); 파라미터 이름들 가져오기.
out.println("파라미터 이름:user가 입력 선택값 출력하기<br/>");
Enumeration<String> names = request.getParameterNames();
while(names.hasMoreElements()){
	String parameterName = names.nextElement();
	//p77 37라인 참고
	//request.getParameterMap(): 브라우저가 전송한 파라미터의 맵
	//다중선택이 있으니까 배열로 받는다.
	Map<String, String[]> map= request.getParameterMap();
	String[] value= map.get(parameterName);
	
	//브라우저에 파라미터명: user가 입력 선택한 값 출력
	for(String v:value){
	out.println(parameterName+":"+v+"<br/>");	
	}
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

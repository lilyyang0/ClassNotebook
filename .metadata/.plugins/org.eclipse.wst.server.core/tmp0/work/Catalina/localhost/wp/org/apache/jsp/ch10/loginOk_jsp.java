/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.85
 * Generated at: 2024-02-29 00:05:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch10;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.text.SimpleDateFormat;

public final class loginOk_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>loginOk</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>loginOk.jsp</h4>\r\n");
      out.write("이 문서는 loginForm.jsp에서 client가 보낸 id, 비번을 받아 처리하는 server측 페이지 이다.<br/>\r\n");
      out.write("나중에는 LoginHandler.java(p606)에서 처리할 예정이다.<br/>\r\n");
      out.write("<br/>\r\n");
      out.write("<button type=\"button\" onclick=\"location.href='loginForm.jsp'\">back</button> \r\n");
      out.write("<br/><hr/>\r\n");
      out.write("\r\n");
      out.write("\r\n");
 	//MVC패턴: client->요청(request)->server->
	//server는 요청에 따라 비즈니스 로직 수행
	//Controller가 호출
	/* Controller가 해야할 일 - 외워요!
	1. parameter얻기
	2. 비즈니스로직 수행->Service<->DAO<->DB
	//여기에서는 회원DB의 id를 java/비번 qwert가정하고 진행
	//비교하여 id와 비번이 모두 일치해야지만 세션에 정보를 저장
	//id또는 비번이 불일치하면 "id나 비번이 불일치합니다" 메시지를 클라이언트에게 보내줄 예정
	3. Model - session객체를 이용.
	//session.setAttribute(String속성명, Object값)
	session.setAttribute(String 속성명, Object값)
	session.setAttribute("","아무id");
	4. View지정	
	//out.println("id나 비번이 불일치");//loginOk.jsp브라우저에 출력
	*/

	//세션이 생성된 시간
	
	//1. parameter
	String id = request.getParameter("id");//name속성 값 가져옴
	String pw = request.getParameter("password");//name속성 값 가져옴

	
	String dbid="java";
	String dbpwd="qwert";
	if(dbid.equals(id)&&dbpwd.equals(pw)){
		session.setAttribute("AUTH_USER_ID",dbid);
		session.setAttribute("AUTH_USER_PWD",dbpwd);
		out.println("===로그인 성공 했습니다.===<br/>");
		}else{
		//id또는 비번이 불일치하면 "id나 비번이 불일치합니다" 메시지를 클라이언트에게 보내줄 예정
		//"id나 비번이 불일치합니다" 메시지를
		//client에게 보내줄 예정
		//Model
		//request.setAttribute(String 속성명, Object 값)
		request.setAttribute("errMSG", "id나 비번이 불일치합니다");
		//out.println("===id나 비번이 불일치 합니다===<br/>");//loginOk.jsp 브라우저에 출력	
		System.out.println(request.getAttribute("errMSG"));//콘솔출력
		
		RequestDispatcher dispatcher = request.getRequestDispatcher("loginForm.jsp");
		dispatcher.forward(request, response);
		
		//response.sendRedirect("loginForm.jsp");
		}

      out.write('\r');
      out.write('\n');
	
	//3. Model
	String loginId = (String) session.getAttribute("AUTH_USER_ID");
	String loginpw = (String) session.getAttribute("AUTH_USER_PWD");//비번->제거	
	
	long ct= session.getCreationTime();
	Date time = new Date(ct);
	SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");//p235 7라인

      out.write("\r\n");
      out.write("<hr/>\r\n");
      out.write("\r\n");
      out.write("* jsp에는 기본객체session이 이미 내장되어 있다.<br/>\r\n");
      out.write("* servlet에서는 HttpSession을 얻어야 한다.<br/>\r\n");
      out.write("<br/>\r\n");
      out.write("<ul>\r\n");
      out.write("<li>session의 id:");
      out.print(session.getId() );
      out.write("</li>\r\n");
      out.write("<li>session이 생성된 시간.session.getCreationTime() : ");
      out.print(session.getCreationTime() );
      out.write("<br/>\r\n");
      out.write("									Date객체 이용:");
      out.print(time );
      out.write("<br/>\r\n");
      out.write("									포맷에 Date객체를 적용:");
      out.print(formatter.format(time) );
      out.write("<br/>\r\n");
      out.write("</li>\r\n");
      out.write("<li>최근접근시간 session.getLastAccessedTime():");
      out.print(session.getLastAccessedTime() );
      out.write("</li>\r\n");
      out.write("</ul>\r\n");
      out.write("\r\n");
      out.write("<!--  불필요한 코드 영역 -->\r\n");
      out.write("<ol>\r\n");
      out.write("<li>세션에 저장된 id: ");
      out.print(session.getAttribute("AUTH_USER_ID") );
      out.write("</li>\r\n");
      out.write("<li>세션에 저장된 id: ");
      out.print(loginId);
      out.write("</li>\r\n");
      out.write("<li>세션에 저장된 pw: ");
      out.print(session.getAttribute("AUTH_USER_PWD") );
      out.write("</li>\r\n");
      out.write("<li>세션에 저장된 pw: ");
      out.print(loginpw);
      out.write("</li>\r\n");
      out.write("<li>");
      out.print(loginId );
      out.write("님 <a href=\"logout.jsp\">로그아웃</a></li>\r\n");
      out.write("</ol>\r\n");
      out.write("\r\n");
      out.write("<a href=\"logout.jsp\"/>로그아웃</a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
